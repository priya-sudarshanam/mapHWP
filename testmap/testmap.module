<?php

/* requiring files which contain dbfunctions and helper functions */
require_once('testmap.dbfunctions.inc');
require_once('testmap.helperfunctions.inc');
ctools_include('ajax');
ctools_include('modal');

/* tips
* print_r formatted version of the array and var_dump but with more detail
*/

/**
 * hook_menu for map
 */	
function testmap_menu(){
	
    $items = array();
    $items['testmap'] = array(
        'title' => 'Map',
        'description' => 'Displays map, enables addition, deletion and updation of locations',
        'page callback' => 'mapShow', 
		'access callback' => TRUE,
		);
	$items['testmap/map']=array(
	    'title' => 'Map Display',
		'type' => MENU_DEFAULT_LOCAL_TASK,
		'weight' => -10,
    );	
	 $items['testmap/list'] = array (
	   'title' => 'Locations List, Add, Delete & Edit',
	   'type' => MENU_LOCAL_TASK,
	   'weight' => -9,
	   'page callback' => 'locations_list',
	   'access callback' => TRUE,	
	); 
     
	 $items['testmap/uploadfiles'] = array (
        'title' => 'Upload Files',
        'type' => MENU_LOCAL_TASK,
        'weight' => -8,
        'page callback' => 'drupal_get_form',
		'page arguments' => array('upload_file'),
	    'access callback' => TRUE,
	);
	 
	 $items['testmap/add/nojs'] = array (
	   'type' => MENU_CALLBACK,
	   'tite' => 'Locations',
	   'page callback' => 'add_locations',
	   'page arguments' => array(2),
	   'access callback' => TRUE,
	   'delivery callback' => 'ajax_deliver',
	 );
	   $items['testmap/add/ajax'] = array (
       'delivery callback' => 'ajax_deliver',
	    ) + $items['testmap/add/nojs'];  
		
	 $items['testmap/delete/nojs/%'] = array (
	   'page callback' => 'delete_location',
	   'page arguments' => array(2,3),
	   'access arguments' => array('access location id'),
	   'access callback' => TRUE,
	   'type' => MENU_CALLBACK,
	   'delivery callback' => 'ajax_deliver',
     );
	   $items['testmap/delete/ajax/%'] = array (
       'delivery callback' => 'ajax_deliver',
	    ) + $items['testmap/delete/nojs/%']; 
   
	 $items['testmap/update/nojs/%'] = array (
	   'type' => MENU_CALLBACK,
	   'page callback' => 'update_location',
	   'page arguments' => array(2,3),
	   'access callback' => TRUE,
	   'access arguments' => array('access location id'),
	   'delivery callback' => 'ajax_deliver',
	 );
	 $items['testmap/update/ajax/%'] = array (
       'delivery callback' => 'ajax_deliver',
	    ) + $items['testmap/update/nojs/%'];  
	return $items;
}

function upload_file($form, &$form_state){
 $form = array();
 $form['upload'] = array(
      '#type' => 'fieldset', 
	  '#title' => t('Upload Files'),
    );
    $form['upload']['file'] = array (
	   '#type' => 'file',
	   '#title' => 'File: ',
	   '#id' => 'file',
	   '#description' => t('Upload a file, allowed extension: csv'),
	   '#attributes' => array(
	    'onChange' => 'var ext=document.getElementById(\'file\').value.split(".").pop();
                  		if (ext != "csv") {
						alert("wrong file");
 						this.form.reset();
						return false;} 
						else {return true;}')

	);
	  
	 
	 $form['upload']['reset'] = array(
	  '#type' => 'button',
      '#value' => 'Remove',
	  '#validate' => array(),
	  '#attributes' => array(
	    'onClick' => 'this.form.reset(); return false;')
	);
	
	 $form['upload']['submit'] =array (
       '#type' => 'submit',
	   '#value' => 'Upload',);

	 	 
  return $form;
}

function upload_file_validate($form, &$form_state){
         $file = file_save_upload('file', array(
	            'file_validate_extensions' => array('csv'),
				FILE_EXISTS_REPLACE));
	   	
	      if ($file) {
		    if($file = file_move($file, 'public://'.$file->filename.'')){
			    $form_state['upload']['values']['file'] = $file;
			     }
			
		    else 
			{
			  drupal_set_message(t('failed to write'). 'error');
			}
		 }
		 else {
		   drupal_set_message(t('no file was uploaded'), 'error');
		  }  
}

  function upload_file_submit($form, &$form_state){
    $success = 0;
    $file = $form_state['upload']['values']['file'];
 //   $file->status = FILE_STATUS_PERMANENT;
    $txt_file = file_get_contents('public://'.$file->filename.'');
 	$data = array();
	$firstLine = true;
	foreach(explode("\n", $txt_file) as $line) {
		if($firstLine) { $firstLine = false; continue; } 
			$row = explode(',', $line);
			if ($row[0] !=''){
				$data[] = array(
				'name' => $row[0],
				'address' => str_replace('"', '',$row[1].','.$row[2]),
				'type' => str_replace('\'','',$row[3])
			);
		}
	}
	$mapValue =array();
	foreach($data as $row){
	  $lat_lng = get_latitude_longitude($row['address']);
	  $mapValue = array (
		'name' =>$row['name'],
		'address' => $row['address'],
		'lat' => $lat_lng['lat'],
		'lng' => $lat_lng['lng'],
		'type' => $row['type']);
    
	$success = map_insert_data($mapValue); }
    if ($success){
	  unset($form_state['upload']['values']['file']);
	  file_delete($file);
	  drupal_set_message(t('worked'));
	}
	else
	{
	 drupal_set_message(t('did not work'), 'error');
	}
	
  }
/* Add functions begins 
************************************************************************************************
*/
function return_modal_form($variable, $name=NULL, $id=NULL){
 if ($variable === 'add'){
  $form_state = array(
      'ajax' => TRUE,
      'title' => t('Add Location'),
    );
     $output = ctools_modal_form_wrapper('add_locations_form', $form_state);    
  }
if ($variable === 'delete'){
   $form_state = array(
    'ajax' => TRUE,
	'title' => 'Delete Location:  '.$name,
	'id' => $id
   );
   $output = ctools_modal_form_wrapper('delete_location_form', $form_state);
   }  
if ($variable === 'update')
 {
   $form_state = array(
      'ajax' => TRUE,
      'title' => t('Update Location'),
    );
 
    $output = ctools_modal_form_wrapper('update_locations_form', $form_state);
   }
  if (!empty($form_state['ajax_commands'])) {
      $output = $form_state['ajax_commands'];
    }
  if (!empty($form_state['executed'])) {

    ctools_add_js('ajax-responder');

    $output = array();
    $output[] = ctools_modal_command_dismiss();
    $output[] = ctools_ajax_command_reload();
     }
  return $output;
}
function add_locations($js = NULL) {
   if (!$js) {
    return drupal_get_form('add_locations_form');
  }
    $output = return_modal_form('add');
    print ajax_render($output);
    exit();
  }
  
function add_locations_form($form, $form_state) {   
//  $form = array();
  return create_form($form,$form_state,'add');
}
/**
 * adds new location details to the table = 'osmap'
 */
function add_locations_form_submit($form, &$form_state){
    $lat_lng = get_latitude_longitude($form_state['values']['address']);
	$mapValues =  return_map_values($form_state['values']['name'], $form_state['values']['address'],
	                                $form_state['values']['type'], $lat_lng['lat'], $lat_lng['lng']
									);
    try {
				$returnValue = map_insert_data($mapValues);
	//		    drupal_set_message(t('Successfully added new location: '.$mapValues['name']));
	     }
		 catch (Exception $e){
                drupal_set_message(t('Insert of location: "'.$mapValues['name'].'" failed. Message = %message, query=%query', 
	            array('%message' =>$e->getMessage(),'%query' => $e->query_string)), 'error');

          }   
 }

/* Add functions ends 
************************************************************************************************
*/
/* Delete functions starts
************************************************************************************************
*/
function delete_location($js = NULL, $location_id){
   if(!$js) {
   $form = array();
   return drupal_get_form('delete_location_form');
   } 
   $locationDetails = map_select_data_id($location_id);
   $output = return_modal_form('delete', $locationDetails['name'], $location_id);
   print ajax_render($output);
   exit(); 
  }
  
 /**
 * creating the modal delete form
 */
  function delete_location_form($form, $form_state){
    return create_delete_form($form, $form_state);
  }
 
 /**
 * submitting the delete location form
 */
 function delete_location_form_submit($form, $form_state){
   
     $deleting_id = ($form_state['id']);
	 $success = map_delete_data($deleting_id);
 }
  
/* Delete functions ends
************************************************************************************************
*/

/* Update functions starts
************************************************************************************************
*/
/**
 * creating the modal update form
 */
function update_location($js = NULL, $location_id){
  if(!$js) {
   $form = array();
   return drupal_get_form('update_location_form');
   }
     
   $form_state = array(
    'ajax' => TRUE,
	'title' => 'Update location',
	'id' => $location_id
   );
   $output = ctools_modal_form_wrapper('update_location_form', $form_state);
   if(!empty($form_state['ajax_commands'])){
     $output = $form_state['ajax_commands'];
   }
   if(!empty($form_state['executed'])){
    ctools_add_js('ajax-responder');
	$output[] = ctools_modal_command_dismiss();
	$output[] = ctools_ajax_command_reload();   
   }
   print ajax_render($output);
   exit();
}

/**
 * creating the update form
 */
function update_location_form($form, $form_state) {   
  $form = array();
  return create_form($form, $form_state,'update');
}

/**
 * submitting the update form
 */
function update_location_form_submit($form, &$form_state){
    $updatingId=($form_state['id']);
	$lat_lng = get_latitude_longitude($form_state['values']['address']);
    $mapValues =  return_map_values($form_state['values']['name'], $form_state['values']['address'],
	                                $form_state['values']['type'], $lat_lng['lat'], $lat_lng['lng']
									);
   try {
      $count = map_update_data($mapValues, $updatingId);
     // drupal_set_message(t("Updated location @mapValue (@count row updated)", 
	//                     array('@count' => $count, '@mapValue' =>print_r($mapValues['name'], TRUE))));
	  }
   catch (Exception $e)
    {
       drupal_set_message(t('Failed to update location. Message = %message, query=%query', 
	            array('%message' =>$e->getMessage(),'%query' => $e->query_string)), 'error');
      }     
}
 /* Update functions ends
************************************************************************************************
*/
 /**
 * Displays values of the location in a table. For eg: name, address and type of the location
 * $mapValues retrieves the data from 'osmap' table and displays it in table
 */
function locations_list(){
  return create_map_table();  
  }
 
function ajaxed_list($type = 'ajax'){
  $output = locations_list();
  if ($type == 'ajax'){
    $commands = array();
	$commands[] = ajax_command_html('#locations_list',$output);
	$response = array('#type' => 'ajax' , '#commands' => $commands);
	ajax_deliver($response);
 }
 else {
    $build = array(
    'markup' => array(
	   '#markup' => $output));
    return $build;
    }
 }
 /**
 * display the map with all the locations present in the table
 * #markup -> displays a google map in the div
 * #js -> attaches two js files, one external and one internal
 * $mapValues are sent via settings feature in drupal 7
 */
function mapShow(){
  try {
 	 $mapValues = map_select_data();
     $build = array(
	  '#markup' => '<div id="googleMap" style="width: 80%; height: 500px;"></div>',
	  '#attached' => array (
	     'js' => array (
		    'https://maps.googleapis.com/maps/api/js?v=3.exp&sensor=false' => array('type' => 'external',),
	        drupal_get_path('module', 'testmap') . '/testmap.js' ,
			array(
				'type' => 'setting',
				'data' => array(
					'testmap' => $mapValues
					)
				)
			)		
		),
     );  
   }
  catch (Exception $e)
    {
       drupal_set_message(t('Error in displaying map. Message = %message, query=%query', 
	            array('%message' =>$e->getMessage(),'%query' => $e->query_string)), 'error');
    }	
	return $build;	  
}





